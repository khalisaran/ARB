package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.ReasonForNotCount;

import com.AssetRegisterBook.dao.couchbase.ReasonForNotCountDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("ReasonForNotCountService")
public class ReasonForNotCountService   {
private static Logger log = Logger.getLogger(ReasonForNotCountService.class.getName());

	private ReasonForNotCountDao ReasonForNotCount_dao;


	public ReasonForNotCountDao get_ReasonForNotCount_dao() {
		return ReasonForNotCount_dao;
	}


	@Resource(name="ReasonForNotCountDao")
	public void set_ReasonForNotCount_dao(ReasonForNotCountDao ReasonForNotCount_dao) {
		this.ReasonForNotCount_dao = ReasonForNotCount_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  ReasonForNotCount noun into database
	*@param ReasonForNotCount
	*@param user
	*@return the_ReasonForNotCount object will return
	*@throws Exception
	*/

	public ReasonForNotCount create_reasonfornotcount(ReasonForNotCount ReasonForNotCount) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_reasonfornotcount service operation started !");

		try{
			ReasonForNotCount the_ReasonForNotCount;

			the_ReasonForNotCount = ReasonForNotCount_dao.create_reasonfornotcount(ReasonForNotCount);

 			log.info(" Object returned from create_reasonfornotcount  service method !");
			return the_ReasonForNotCount;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_reasonfornotcount service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  ReasonForNotCount noun into database
	*@param ReasonForNotCount
	*@param user
	*@return the_ReasonForNotCount object will return
	*@throws Exception
	*/

	public ReasonForNotCount update_reasonfornotcount(ReasonForNotCount ReasonForNotCount) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_reasonfornotcount service operation started !");

		try{
			ReasonForNotCount the_ReasonForNotCount;

			the_ReasonForNotCount = ReasonForNotCount_dao.update_reasonfornotcount(ReasonForNotCount);

 			log.info(" Object returned from update_reasonfornotcount  service method !");
			return the_ReasonForNotCount;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_reasonfornotcount service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  ReasonForNotCount noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ReasonForNotCount object will return
	*@throws Exception
	*/

	public ReasonForNotCount reasonfornotcount_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("reasonfornotcount_search_for_update service operation started !");

		try{
			ReasonForNotCount the_ReasonForNotCount;

			the_ReasonForNotCount = ReasonForNotCount_dao.reasonfornotcount_search_for_update(id);

 			log.info(" Object returned from reasonfornotcount_search_for_update  service method !");
			return the_ReasonForNotCount;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("reasonfornotcount_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  ReasonForNotCount noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ReasonForNotCount id deleted based on id
	*@throws Exception
	*/

	public String  delete_reasonfornotcount(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_reasonfornotcount service operation started !");

		try{
			String method_return_message;

			method_return_message = ReasonForNotCount_dao.delete_reasonfornotcount(id);

 			log.info(" Object returned from delete_reasonfornotcount  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_reasonfornotcount service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  ReasonForNotCount noun from  database
	*
	*
	*@return List of ReasonForNotCount object will return
	*@throws Exception
	*/

	public ArrayList<ReasonForNotCount> get_all_reasonfornotcount() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<ReasonForNotCount> ReasonForNotCount_list;

			ReasonForNotCount_list = ReasonForNotCount_dao.get_all_reasonfornotcount();

 			log.info(" Object returned from   service method !");
			return ReasonForNotCount_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}