package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.ApproverOrProjectManager;

import com.AssetRegisterBook.dao.couchbase.ApproverOrProjectManagerDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("ApproverOrProjectManagerService")
public class ApproverOrProjectManagerService   {
private static Logger log = Logger.getLogger(ApproverOrProjectManagerService.class.getName());

	private ApproverOrProjectManagerDao ApproverOrProjectManager_dao;


	public ApproverOrProjectManagerDao get_ApproverOrProjectManager_dao() {
		return ApproverOrProjectManager_dao;
	}


	@Resource(name="ApproverOrProjectManagerDao")
	public void set_ApproverOrProjectManager_dao(ApproverOrProjectManagerDao ApproverOrProjectManager_dao) {
		this.ApproverOrProjectManager_dao = ApproverOrProjectManager_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  ApproverOrProjectManager noun into database
	*@param ApproverOrProjectManager
	*@param user
	*@return the_ApproverOrProjectManager object will return
	*@throws Exception
	*/

	public ApproverOrProjectManager create_approverorprojectmanager(ApproverOrProjectManager ApproverOrProjectManager) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_approverorprojectmanager service operation started !");

		try{
			ApproverOrProjectManager the_ApproverOrProjectManager;

			the_ApproverOrProjectManager = ApproverOrProjectManager_dao.create_approverorprojectmanager(ApproverOrProjectManager);

 			log.info(" Object returned from create_approverorprojectmanager  service method !");
			return the_ApproverOrProjectManager;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_approverorprojectmanager service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  ApproverOrProjectManager noun into database
	*@param ApproverOrProjectManager
	*@param user
	*@return the_ApproverOrProjectManager object will return
	*@throws Exception
	*/

	public ApproverOrProjectManager update_approverorprojectmanager(ApproverOrProjectManager ApproverOrProjectManager) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_approverorprojectmanager service operation started !");

		try{
			ApproverOrProjectManager the_ApproverOrProjectManager;

			the_ApproverOrProjectManager = ApproverOrProjectManager_dao.update_approverorprojectmanager(ApproverOrProjectManager);

 			log.info(" Object returned from update_approverorprojectmanager  service method !");
			return the_ApproverOrProjectManager;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_approverorprojectmanager service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  ApproverOrProjectManager noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ApproverOrProjectManager object will return
	*@throws Exception
	*/

	public ApproverOrProjectManager approverorprojectmanager_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("approverorprojectmanager_search_for_update service operation started !");

		try{
			ApproverOrProjectManager the_ApproverOrProjectManager;

			the_ApproverOrProjectManager = ApproverOrProjectManager_dao.approverorprojectmanager_search_for_update(id);

 			log.info(" Object returned from approverorprojectmanager_search_for_update  service method !");
			return the_ApproverOrProjectManager;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("approverorprojectmanager_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  ApproverOrProjectManager noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ApproverOrProjectManager id deleted based on id
	*@throws Exception
	*/

	public String  delete_approverorprojectmanager(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_approverorprojectmanager service operation started !");

		try{
			String method_return_message;

			method_return_message = ApproverOrProjectManager_dao.delete_approverorprojectmanager(id);

 			log.info(" Object returned from delete_approverorprojectmanager  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_approverorprojectmanager service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  ApproverOrProjectManager noun from  database
	*
	*
	*@return List of ApproverOrProjectManager object will return
	*@throws Exception
	*/

	public ArrayList<ApproverOrProjectManager> get_all_approverorprojectmanager() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<ApproverOrProjectManager> ApproverOrProjectManager_list;

			ApproverOrProjectManager_list = ApproverOrProjectManager_dao.get_all_approverorprojectmanager();

 			log.info(" Object returned from   service method !");
			return ApproverOrProjectManager_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}