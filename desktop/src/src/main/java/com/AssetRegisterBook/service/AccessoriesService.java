package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.Accessories;

import com.AssetRegisterBook.dao.couchbase.AccessoriesDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("AccessoriesService")
public class AccessoriesService   {
private static Logger log = Logger.getLogger(AccessoriesService.class.getName());

	private AccessoriesDao Accessories_dao;


	public AccessoriesDao get_Accessories_dao() {
		return Accessories_dao;
	}


	@Resource(name="AccessoriesDao")
	public void set_Accessories_dao(AccessoriesDao Accessories_dao) {
		this.Accessories_dao = Accessories_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  Accessories noun into database
	*@param Accessories
	*@param user
	*@return the_Accessories object will return
	*@throws Exception
	*/

	public Accessories create_accessories(Accessories Accessories) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_accessories service operation started !");

		try{
			Accessories the_Accessories;

			the_Accessories = Accessories_dao.create_accessories(Accessories);

 			log.info(" Object returned from create_accessories  service method !");
			return the_Accessories;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_accessories service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  Accessories noun into database
	*@param Accessories
	*@param user
	*@return the_Accessories object will return
	*@throws Exception
	*/

	public Accessories update_accessories(Accessories Accessories) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_accessories service operation started !");

		try{
			Accessories the_Accessories;

			the_Accessories = Accessories_dao.update_accessories(Accessories);

 			log.info(" Object returned from update_accessories  service method !");
			return the_Accessories;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_accessories service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  Accessories noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Accessories object will return
	*@throws Exception
	*/

	public Accessories accessories_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("accessories_search_for_update service operation started !");

		try{
			Accessories the_Accessories;

			the_Accessories = Accessories_dao.accessories_search_for_update(id);

 			log.info(" Object returned from accessories_search_for_update  service method !");
			return the_Accessories;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("accessories_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  Accessories noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Accessories id deleted based on id
	*@throws Exception
	*/

	public String  delete_accessories(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_accessories service operation started !");

		try{
			String method_return_message;

			method_return_message = Accessories_dao.delete_accessories(id);

 			log.info(" Object returned from delete_accessories  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_accessories service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  Accessories noun from  database
	*
	*
	*@return List of Accessories object will return
	*@throws Exception
	*/

	public ArrayList<Accessories> get_all_accessories() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<Accessories> Accessories_list;

			Accessories_list = Accessories_dao.get_all_accessories();

 			log.info(" Object returned from   service method !");
			return Accessories_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}