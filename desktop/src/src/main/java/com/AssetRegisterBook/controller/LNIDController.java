package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.LNID;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.LNIDService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/LNID", description = "LNID of LNID",produces = "application/json")
@CrossOrigin
@Controller("LNIDController")
@RequestMapping("/api/LNID")
public class LNIDController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(LNIDController.class.getName());

 


	private LNIDService LNID_service;


	public LNIDService get_LNID_service() {
		return LNID_service;
	}


	@Resource(name="LNIDService")
	public void set_LNID_service(LNIDService LNID_service) {
		this.LNID_service = LNID_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  LNID noun into database
	* @param the_LNID
	*@return LNID object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_LNID", httpMethod = "POST",notes = "creates a noun of LNID",response = LNID.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_LNID" ,headers="Accept=application/json")
    @ResponseBody
	public LNID create_LNID(@RequestBody LNID the_LNID) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_LNID controller started operation!");

		the_LNID.setId(null);

		LNID a_LNID = LNID_service.create_lnid(the_LNID);

		log.info("Object returned from create_LNID method !");

 

        return a_LNID;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  LNID noun into database
	*@param the_LNID
	*@return LNIDobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_LNID", httpMethod = "PUT",notes = "updates a noun of LNID",response = LNID.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_LNID" ,headers="Accept=application/json")
    @ResponseBody
	public LNID update_LNID(@RequestBody LNID the_LNID) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_LNID controller started operation!");

		LNID a_LNID;

		a_LNID = LNID_service.update_lnid(the_LNID);

		log.info("Object returned from update_LNID method !");

 

        return a_LNID;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  LNID noun from  database based on given noun id
	*@param LNID_id
	*@return LNIDobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_LNID/{LNID_id}", httpMethod = "GET",notes = "updates a noun of LNID",response = LNID.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_LNID/{LNID_id}" ,headers="Accept=application/json")
    @ResponseBody
	public LNID search_for_update_LNID(@PathVariable("LNID_id")String LNID_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_LNID controller started operation!");

		LNID the_LNID = new LNID();

		the_LNID = LNID_service.lnid_search_for_update(LNID_id);

		log.info("Object returned from search_for_update_LNID method !");

 

        return the_LNID;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  LNID noun from  database based on given noun id
	*@param LNID_id
	*@return LNIDobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_LNID/{LNID_id}", httpMethod = "DELETE",notes = "deletes a noun of LNID",response = LNID.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_LNID/{LNID_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_LNID(@PathVariable("LNID_id")String  LNID_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_LNID controller started operation!");

		String service_return_msg = "";

		service_return_msg = LNID_service.delete_lnid(LNID_id);

		log.info("Object returned from delete_LNID method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  LNID noun from  database
	*
	*@return List of LNID objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_LNID", httpMethod = "GET",notes = "special search that gets all values of LNID",response = LNID.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_LNID" ,headers="Accept=application/json")
    @ResponseBody
	public List<LNID> get_all_LNID() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_LNID controller started operation!");

		List<LNID> LNID_list = new ArrayList<LNID>();

		LNID_list = LNID_service.get_all_lnid();

		log.info("Object returned from get_all_LNID method !");

 

        return LNID_list;

	}




}