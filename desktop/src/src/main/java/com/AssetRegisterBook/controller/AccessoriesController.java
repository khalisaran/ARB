package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.Accessories;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.AccessoriesService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/Accessories", description = "Accessories of Accessories",produces = "application/json")
@CrossOrigin
@Controller("AccessoriesController")
@RequestMapping("/api/Accessories")
public class AccessoriesController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(AccessoriesController.class.getName());

 


	private AccessoriesService Accessories_service;


	public AccessoriesService get_Accessories_service() {
		return Accessories_service;
	}


	@Resource(name="AccessoriesService")
	public void set_Accessories_service(AccessoriesService Accessories_service) {
		this.Accessories_service = Accessories_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Accessories noun into database
	* @param the_Accessories
	*@return Accessories object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Accessories", httpMethod = "POST",notes = "creates a noun of Accessories",response = Accessories.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Accessories" ,headers="Accept=application/json")
    @ResponseBody
	public Accessories create_Accessories(@RequestBody Accessories the_Accessories) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Accessories controller started operation!");

		the_Accessories.setId(null);

		Accessories a_Accessories = Accessories_service.create_accessories(the_Accessories);

		log.info("Object returned from create_Accessories method !");

 

        return a_Accessories;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Accessories noun into database
	*@param the_Accessories
	*@return Accessoriesobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Accessories", httpMethod = "PUT",notes = "updates a noun of Accessories",response = Accessories.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Accessories" ,headers="Accept=application/json")
    @ResponseBody
	public Accessories update_Accessories(@RequestBody Accessories the_Accessories) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Accessories controller started operation!");

		Accessories a_Accessories;

		a_Accessories = Accessories_service.update_accessories(the_Accessories);

		log.info("Object returned from update_Accessories method !");

 

        return a_Accessories;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Accessories noun from  database based on given noun id
	*@param Accessories_id
	*@return Accessoriesobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Accessories/{Accessories_id}", httpMethod = "GET",notes = "updates a noun of Accessories",response = Accessories.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Accessories/{Accessories_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Accessories search_for_update_Accessories(@PathVariable("Accessories_id")String Accessories_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Accessories controller started operation!");

		Accessories the_Accessories = new Accessories();

		the_Accessories = Accessories_service.accessories_search_for_update(Accessories_id);

		log.info("Object returned from search_for_update_Accessories method !");

 

        return the_Accessories;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Accessories noun from  database based on given noun id
	*@param Accessories_id
	*@return Accessoriesobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Accessories/{Accessories_id}", httpMethod = "DELETE",notes = "deletes a noun of Accessories",response = Accessories.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Accessories/{Accessories_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Accessories(@PathVariable("Accessories_id")String  Accessories_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Accessories controller started operation!");

		String service_return_msg = "";

		service_return_msg = Accessories_service.delete_accessories(Accessories_id);

		log.info("Object returned from delete_Accessories method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Accessories noun from  database
	*
	*@return List of Accessories objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Accessories", httpMethod = "GET",notes = "special search that gets all values of Accessories",response = Accessories.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Accessories" ,headers="Accept=application/json")
    @ResponseBody
	public List<Accessories> get_all_Accessories() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Accessories controller started operation!");

		List<Accessories> Accessories_list = new ArrayList<Accessories>();

		Accessories_list = Accessories_service.get_all_accessories();

		log.info("Object returned from get_all_Accessories method !");

 

        return Accessories_list;

	}




}