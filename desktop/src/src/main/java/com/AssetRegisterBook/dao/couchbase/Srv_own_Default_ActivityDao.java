package com.AssetRegisterBook.dao.couchbase;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.apache.log4j.*;

import com.couchbase.client.CouchbaseClient;
import com.couchbase.client.protocol.views.DesignDocument;
import com.couchbase.client.protocol.views.Query;
import com.couchbase.client.protocol.views.Stale;

import org.springframework.data.couchbase.core.CouchbaseTemplate;
import com.couchbase.client.protocol.views.ViewDesign;


import com.AssetRegisterBook.domain.core.Srv_own;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Repository("Srv_own_Default_ActivityDao")
public class Srv_own_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Srv_own_Default_ActivityDao.class.getName());

	@Autowired
 	CouchbaseTemplate couchbaseTemplate;

 	@Autowired
 	CouchbaseClient client ;


	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Srv_own noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Srv_own object will return
	*@throws Exception
	*/

	public Srv_own srv_own_search_for_update(String id) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("srv_own_search_for_update Dao started operation!");

		   Srv_own  the_srv_own = couchbaseTemplate.findById(id,Srv_own.class);
		  return the_srv_own;

	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Srv_own noun from  database
	*
	*
	*@return List of Srv_own object will return
	*@throws Exception
	*/

	public ArrayList<Srv_own> get_all_srv_own() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_srv_own Dao started operation!");


		   Query query = new Query();
		   query.setIncludeDocs(true);
		   query.setStale( Stale.FALSE );

		  return (ArrayList<Srv_own>)  couchbaseTemplate.findByView("dev_srv_own","srv_own_by_name",query,Srv_own.class);

	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Srv_own noun into database
	*@param Srv_own
	*@param user
	*@return Srv_own object will return
	*@throws Exception
	*/


	public Srv_own create_srv_own(Srv_own Srv_own ) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_srv_own Dao started operation!");

 		 String key = "Document_count";
 		 String  clientKey =  Long.toString(client.incr(key,1,1));
 		 Srv_own.setId(clientKey);
 		 couchbaseTemplate.save(Srv_own);
 		 String viewName = "srv_own_by_name";
 		  String mapFunction =  "function (doc, meta) {"
 		 +  "if (doc._class == \"com.AssetRegisterBook.domain.core.Srv_own\") {"
 		  + "emit(null, null);"
 		  +" }"
 		 +"}";
 		 DesignDocument designDoc = new DesignDocument("dev_srv_own");
 		 System.err.println("-- > designDoc - > "+designDoc.getName()+"-> lan - > "+designDoc.getLanguage());
 		 ViewDesign view = new ViewDesign(viewName, mapFunction);
 		 System.err.println("-- > view - > "+view.getName()+"-> lan - > "+view.getReduce().toString());
 		 designDoc.getViews().add(view);
 		 client.createDesignDoc(designDoc);

		  return Srv_own;

	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Srv_own noun into database
	*@param Srv_own
	*@param user
	*@return the_Srv_own object will return
	*@throws Exception
	*/


	public Srv_own update_srv_own(Srv_own Srv_own) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_srv_own Dao started operation!");

 		 couchbaseTemplate.save(Srv_own);
		  return Srv_own;

	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Srv_own noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Srv_own id deleted based on id
	*@throws Exception
	*/


	public String  delete_srv_own(String  id) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_srv_own Dao started operation!");

 		 client.delete(id);
		  return "{\"status\":\"success\"}";

	}



}