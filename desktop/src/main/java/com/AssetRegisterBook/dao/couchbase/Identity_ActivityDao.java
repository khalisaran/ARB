package com.AssetRegisterBook.dao.couchbase;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.apache.log4j.*;

import com.couchbase.client.CouchbaseClient;
import com.couchbase.client.protocol.views.DesignDocument;
import com.couchbase.client.protocol.views.Query;
import com.couchbase.client.protocol.views.Stale;

import org.springframework.data.couchbase.core.CouchbaseTemplate;
import com.couchbase.client.protocol.views.ViewDesign;


import com.AssetRegisterBook.domain.core.Identity;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Repository("Identity_ActivityDao")
public class Identity_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Identity_ActivityDao.class.getName());

	@Autowired
 	CouchbaseTemplate couchbaseTemplate;

 	@Autowired
 	CouchbaseClient client ;


	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Identity noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Identity object will return
	*@throws Exception
	*/

	public Identity identity_search_for_update(String id) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("identity_search_for_update Dao started operation!");

		   Identity  the_identity = couchbaseTemplate.findById(id,Identity.class);
		  return the_identity;

	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Identity noun from  database
	*
	*
	*@return List of Identity object will return
	*@throws Exception
	*/

	public ArrayList<Identity> get_all_identity() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_identity Dao started operation!");


		   Query query = new Query();
		   query.setIncludeDocs(true);
		   query.setStale( Stale.FALSE );

		  return (ArrayList<Identity>)  couchbaseTemplate.findByView("dev_identity","identity_by_name",query,Identity.class);

	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Identity noun into database
	*@param Identity
	*@param user
	*@return Identity object will return
	*@throws Exception
	*/


	public Identity create_identity(Identity Identity ) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_identity Dao started operation!");

 		 String key = "Document_count";
 		 String  clientKey =  Long.toString(client.incr(key,1,1));
 		 Identity.setid(clientKey);
 		 couchbaseTemplate.save(Identity);
 		 String viewName = "identity_by_name";
 		  String mapFunction =  "function (doc, meta) {"
 		 +  "if (doc._class == \"com.AssetRegisterBook.domain.core.Identity\") {"
 		  + "emit(null, null);"
 		  +" }"
 		 +"}";
 		 DesignDocument designDoc = new DesignDocument("dev_identity");
 		 System.err.println("-- > designDoc - > "+designDoc.getName()+"-> lan - > "+designDoc.getLanguage());
 		 ViewDesign view = new ViewDesign(viewName, mapFunction);
 		 System.err.println("-- > view - > "+view.getName()+"-> lan - > "+view.getReduce().toString());
 		 designDoc.getViews().add(view);
 		 client.createDesignDoc(designDoc);

		  return Identity;

	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Identity noun into database
	*@param Identity
	*@param user
	*@return the_Identity object will return
	*@throws Exception
	*/


	public Identity update_identity(Identity Identity) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_identity Dao started operation!");

 		 couchbaseTemplate.save(Identity);
		  return Identity;

	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Identity noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Identity id deleted based on id
	*@throws Exception
	*/


	public String  delete_identity(String  id) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_identity Dao started operation!");

 		 client.delete(id);
		  return "{\"status\":\"success\"}";

	}



}