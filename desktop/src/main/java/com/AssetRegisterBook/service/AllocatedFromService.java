package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.AllocatedFrom;

import com.AssetRegisterBook.dao.couchbase.AllocatedFromDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("AllocatedFromService")
public class AllocatedFromService   {
private static Logger log = Logger.getLogger(AllocatedFromService.class.getName());

	private AllocatedFromDao AllocatedFrom_dao;


	public AllocatedFromDao get_AllocatedFrom_dao() {
		return AllocatedFrom_dao;
	}


	@Resource(name="AllocatedFromDao")
	public void set_AllocatedFrom_dao(AllocatedFromDao AllocatedFrom_dao) {
		this.AllocatedFrom_dao = AllocatedFrom_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  AllocatedFrom noun into database
	*@param AllocatedFrom
	*@param user
	*@return the_AllocatedFrom object will return
	*@throws Exception
	*/

	public AllocatedFrom create_allocatedfrom(AllocatedFrom AllocatedFrom) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_allocatedfrom service operation started !");

		try{
			AllocatedFrom the_AllocatedFrom;

			the_AllocatedFrom = AllocatedFrom_dao.create_allocatedfrom(AllocatedFrom);

 			log.info(" Object returned from create_allocatedfrom  service method !");
			return the_AllocatedFrom;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_allocatedfrom service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  AllocatedFrom noun into database
	*@param AllocatedFrom
	*@param user
	*@return the_AllocatedFrom object will return
	*@throws Exception
	*/

	public AllocatedFrom update_allocatedfrom(AllocatedFrom AllocatedFrom) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_allocatedfrom service operation started !");

		try{
			AllocatedFrom the_AllocatedFrom;

			the_AllocatedFrom = AllocatedFrom_dao.update_allocatedfrom(AllocatedFrom);

 			log.info(" Object returned from update_allocatedfrom  service method !");
			return the_AllocatedFrom;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_allocatedfrom service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  AllocatedFrom noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_AllocatedFrom object will return
	*@throws Exception
	*/

	public AllocatedFrom allocatedfrom_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("allocatedfrom_search_for_update service operation started !");

		try{
			AllocatedFrom the_AllocatedFrom;

			the_AllocatedFrom = AllocatedFrom_dao.allocatedfrom_search_for_update(id);

 			log.info(" Object returned from allocatedfrom_search_for_update  service method !");
			return the_AllocatedFrom;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("allocatedfrom_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  AllocatedFrom noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_AllocatedFrom id deleted based on id
	*@throws Exception
	*/

	public String  delete_allocatedfrom(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_allocatedfrom service operation started !");

		try{
			String method_return_message;

			method_return_message = AllocatedFrom_dao.delete_allocatedfrom(id);

 			log.info(" Object returned from delete_allocatedfrom  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_allocatedfrom service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  AllocatedFrom noun from  database
	*
	*
	*@return List of AllocatedFrom object will return
	*@throws Exception
	*/

	public ArrayList<AllocatedFrom> get_all_allocatedfrom() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<AllocatedFrom> AllocatedFrom_list;

			AllocatedFrom_list = AllocatedFrom_dao.get_all_allocatedfrom();

 			log.info(" Object returned from   service method !");
			return AllocatedFrom_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}