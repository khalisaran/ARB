package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.Identity;

import com.AssetRegisterBook.dao.couchbase.Identity_ActivityDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("Identity_ActivityService")
public class Identity_ActivityService   {
private static Logger log = Logger.getLogger(Identity_ActivityService.class.getName());

	private Identity_ActivityDao Identity_Activity_dao;


	public Identity_ActivityDao get_Identity_Activity_dao() {
		return Identity_Activity_dao;
	}


	@Resource(name="Identity_ActivityDao")
	public void set_Identity_Activity_dao(Identity_ActivityDao Identity_Activity_dao) {
		this.Identity_Activity_dao = Identity_Activity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  Identity noun into database
	*@param Identity
	*@param user
	*@return the_Identity object will return
	*@throws Exception
	*/

	public Identity create_identity(Identity Identity) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_identity service operation started !");

		try{
			Identity the_Identity;

			the_Identity = Identity_Activity_dao.create_identity(Identity);

 			log.info(" Object returned from create_identity  service method !");
			return the_Identity;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_identity service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  Identity noun into database
	*@param Identity
	*@param user
	*@return the_Identity object will return
	*@throws Exception
	*/

	public Identity update_identity(Identity Identity) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_identity service operation started !");

		try{
			Identity the_Identity;

			the_Identity = Identity_Activity_dao.update_identity(Identity);

 			log.info(" Object returned from update_identity  service method !");
			return the_Identity;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_identity service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  Identity noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Identity object will return
	*@throws Exception
	*/

	public Identity identity_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("identity_search_for_update service operation started !");

		try{
			Identity the_Identity;

			the_Identity = Identity_Activity_dao.identity_search_for_update(id);

 			log.info(" Object returned from identity_search_for_update  service method !");
			return the_Identity;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("identity_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  Identity noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Identity id deleted based on id
	*@throws Exception
	*/

	public String  delete_identity(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_identity service operation started !");

		try{
			String method_return_message;

			method_return_message = Identity_Activity_dao.delete_identity(id);

 			log.info(" Object returned from delete_identity  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_identity service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  Identity noun from  database
	*
	*
	*@return List of Identity object will return
	*@throws Exception
	*/

	public ArrayList<Identity> get_all_identity() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<Identity> Identity_list;

			Identity_list = Identity_Activity_dao.get_all_identity();

 			log.info(" Object returned from   service method !");
			return Identity_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}