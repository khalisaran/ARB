package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.BuildingOrFloor;

import com.AssetRegisterBook.dao.couchbase.BuildingOrFloorActivityDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("BuildingOrFloorActivityService")
public class BuildingOrFloorActivityService   {
private static Logger log = Logger.getLogger(BuildingOrFloorActivityService.class.getName());

	private BuildingOrFloorActivityDao BuildingOrFloorActivity_dao;


	public BuildingOrFloorActivityDao get_BuildingOrFloorActivity_dao() {
		return BuildingOrFloorActivity_dao;
	}


	@Resource(name="BuildingOrFloorActivityDao")
	public void set_BuildingOrFloorActivity_dao(BuildingOrFloorActivityDao BuildingOrFloorActivity_dao) {
		this.BuildingOrFloorActivity_dao = BuildingOrFloorActivity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  BuildingOrFloor noun into database
	*@param BuildingOrFloor
	*@param user
	*@return the_BuildingOrFloor object will return
	*@throws Exception
	*/

	public BuildingOrFloor create_buildingorfloor(BuildingOrFloor BuildingOrFloor) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_buildingorfloor service operation started !");

		try{
			BuildingOrFloor the_BuildingOrFloor;

			the_BuildingOrFloor = BuildingOrFloorActivity_dao.create_buildingorfloor(BuildingOrFloor);

 			log.info(" Object returned from create_buildingorfloor  service method !");
			return the_BuildingOrFloor;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_buildingorfloor service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  BuildingOrFloor noun into database
	*@param BuildingOrFloor
	*@param user
	*@return the_BuildingOrFloor object will return
	*@throws Exception
	*/

	public BuildingOrFloor update_buildingorfloor(BuildingOrFloor BuildingOrFloor) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_buildingorfloor service operation started !");

		try{
			BuildingOrFloor the_BuildingOrFloor;

			the_BuildingOrFloor = BuildingOrFloorActivity_dao.update_buildingorfloor(BuildingOrFloor);

 			log.info(" Object returned from update_buildingorfloor  service method !");
			return the_BuildingOrFloor;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_buildingorfloor service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  BuildingOrFloor noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_BuildingOrFloor object will return
	*@throws Exception
	*/

	public BuildingOrFloor buildingorfloor_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("buildingorfloor_search_for_update service operation started !");

		try{
			BuildingOrFloor the_BuildingOrFloor;

			the_BuildingOrFloor = BuildingOrFloorActivity_dao.buildingorfloor_search_for_update(id);

 			log.info(" Object returned from buildingorfloor_search_for_update  service method !");
			return the_BuildingOrFloor;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("buildingorfloor_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  BuildingOrFloor noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_BuildingOrFloor id deleted based on id
	*@throws Exception
	*/

	public String  delete_buildingorfloor(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_buildingorfloor service operation started !");

		try{
			String method_return_message;

			method_return_message = BuildingOrFloorActivity_dao.delete_buildingorfloor(id);

 			log.info(" Object returned from delete_buildingorfloor  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_buildingorfloor service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  BuildingOrFloor noun from  database
	*
	*
	*@return List of BuildingOrFloor object will return
	*@throws Exception
	*/

	public ArrayList<BuildingOrFloor> get_all_buildingorfloor() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<BuildingOrFloor> BuildingOrFloor_list;

			BuildingOrFloor_list = BuildingOrFloorActivity_dao.get_all_buildingorfloor();

 			log.info(" Object returned from   service method !");
			return BuildingOrFloor_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}