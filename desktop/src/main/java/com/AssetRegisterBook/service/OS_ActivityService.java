package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.OS;

import com.AssetRegisterBook.dao.couchbase.OS_ActivityDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("OS_ActivityService")
public class OS_ActivityService   {
private static Logger log = Logger.getLogger(OS_ActivityService.class.getName());

	private OS_ActivityDao OS_Activity_dao;


	public OS_ActivityDao get_OS_Activity_dao() {
		return OS_Activity_dao;
	}


	@Resource(name="OS_ActivityDao")
	public void set_OS_Activity_dao(OS_ActivityDao OS_Activity_dao) {
		this.OS_Activity_dao = OS_Activity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  OS noun into database
	*@param OS
	*@param user
	*@return the_OS object will return
	*@throws Exception
	*/

	public OS create_os(OS OS) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_os service operation started !");

		try{
			OS the_OS;

			the_OS = OS_Activity_dao.create_os(OS);

 			log.info(" Object returned from create_os  service method !");
			return the_OS;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_os service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  OS noun into database
	*@param OS
	*@param user
	*@return the_OS object will return
	*@throws Exception
	*/

	public OS update_os(OS OS) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_os service operation started !");

		try{
			OS the_OS;

			the_OS = OS_Activity_dao.update_os(OS);

 			log.info(" Object returned from update_os  service method !");
			return the_OS;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_os service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  OS noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_OS object will return
	*@throws Exception
	*/

	public OS os_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("os_search_for_update service operation started !");

		try{
			OS the_OS;

			the_OS = OS_Activity_dao.os_search_for_update(id);

 			log.info(" Object returned from os_search_for_update  service method !");
			return the_OS;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("os_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  OS noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_OS id deleted based on id
	*@throws Exception
	*/

	public String  delete_os(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_os service operation started !");

		try{
			String method_return_message;

			method_return_message = OS_Activity_dao.delete_os(id);

 			log.info(" Object returned from delete_os  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_os service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  OS noun from  database
	*
	*
	*@return List of OS object will return
	*@throws Exception
	*/

	public ArrayList<OS> get_all_os() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<OS> OS_list;

			OS_list = OS_Activity_dao.get_all_os();

 			log.info(" Object returned from   service method !");
			return OS_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}