package com.AssetRegisterBook.service;

import java.util.ArrayList;

import javax.annotation.Resource;
import org.springframework.stereotype.Service;
import org.apache.log4j.*;



import com.AssetRegisterBook.domain.core.ProjectName;

import com.AssetRegisterBook.dao.couchbase.ProjectNameActivityDao;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Service("ProjectNameActivityService")
public class ProjectNameActivityService   {
private static Logger log = Logger.getLogger(ProjectNameActivityService.class.getName());

	private ProjectNameActivityDao ProjectNameActivity_dao;


	public ProjectNameActivityDao get_ProjectNameActivity_dao() {
		return ProjectNameActivity_dao;
	}


	@Resource(name="ProjectNameActivityDao")
	public void set_ProjectNameActivity_dao(ProjectNameActivityDao ProjectNameActivity_dao) {
		this.ProjectNameActivity_dao = ProjectNameActivity_dao;
	}



	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform save operation of  ProjectName noun into database
	*@param ProjectName
	*@param user
	*@return the_ProjectName object will return
	*@throws Exception
	*/

	public ProjectName create_projectname(ProjectName ProjectName) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("create_projectname service operation started !");

		try{
			ProjectName the_ProjectName;

			the_ProjectName = ProjectNameActivity_dao.create_projectname(ProjectName);

 			log.info(" Object returned from create_projectname  service method !");
			return the_ProjectName;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("create_projectname service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform update operation of  ProjectName noun into database
	*@param ProjectName
	*@param user
	*@return the_ProjectName object will return
	*@throws Exception
	*/

	public ProjectName update_projectname(ProjectName ProjectName) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("update_projectname service operation started !");

		try{
			ProjectName the_ProjectName;

			the_ProjectName = ProjectNameActivity_dao.update_projectname(ProjectName);

 			log.info(" Object returned from update_projectname  service method !");
			return the_ProjectName;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("update_projectname service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform fetch operation of  ProjectName noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ProjectName object will return
	*@throws Exception
	*/

	public ProjectName projectname_search_for_update(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("projectname_search_for_update service operation started !");

		try{
			ProjectName the_ProjectName;

			the_ProjectName = ProjectNameActivity_dao.projectname_search_for_update(id);

 			log.info(" Object returned from projectname_search_for_update  service method !");
			return the_ProjectName;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("projectname_search_for_update service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to perform delete operation of  ProjectName noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_ProjectName id deleted based on id
	*@throws Exception
	*/

	public String  delete_projectname(String id ) throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info("delete_projectname service operation started !");

		try{
			String method_return_message;

			method_return_message = ProjectNameActivity_dao.delete_projectname(id);

 			log.info(" Object returned from delete_projectname  service method !");
			return method_return_message;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error("delete_projectname service throws exception : "+ e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of this service method is to get list of  ProjectName noun from  database
	*
	*
	*@return List of ProjectName object will return
	*@throws Exception
	*/

	public ArrayList<ProjectName> get_all_projectname() throws Exception {

 		  log.setLevel(Level.INFO);
	      log.info(" service operation started !");

		try{
			ArrayList<ProjectName> ProjectName_list;

			ProjectName_list = ProjectNameActivity_dao.get_all_projectname();

 			log.info(" Object returned from   service method !");
			return ProjectName_list;

		}catch(Exception e){

			System.out.println("ServiceException: " + e.toString());
			log.error(" service throws exception : "+ e.toString());

		}
		return null;



	}




}