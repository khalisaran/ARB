package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.arb;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.AssetregisterbookformService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/Assetregisterbookform", description = "Assetregisterbookform of Assetregisterbookform",produces = "application/json")
@CrossOrigin
@Controller("AssetregisterbookformController")
@RequestMapping("/api/Assetregisterbookform")
public class AssetregisterbookformController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(AssetregisterbookformController.class.getName());

 


	private AssetregisterbookformService Assetregisterbookform_service;


	public AssetregisterbookformService get_Assetregisterbookform_service() {
		return Assetregisterbookform_service;
	}


	@Resource(name="AssetregisterbookformService")
	public void set_Assetregisterbookform_service(AssetregisterbookformService Assetregisterbookform_service) {
		this.Assetregisterbookform_service = Assetregisterbookform_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Assetregisterbookform noun into database
	* @param the_Assetregisterbookform
	*@return Assetregisterbookform object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Assetregisterbookform", httpMethod = "POST",notes = "creates a noun of Assetregisterbookform",response = arb.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Assetregisterbookform" ,headers="Accept=application/json")
    @ResponseBody
	public arb create_Assetregisterbookform(@RequestBody arb the_Assetregisterbookform) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Assetregisterbookform controller started operation!");

		the_Assetregisterbookform.setid(null);

		arb a_Assetregisterbookform = Assetregisterbookform_service.create_assetregisterbookform(the_Assetregisterbookform);

		log.info("Object returned from create_Assetregisterbookform method !");

 

        return a_Assetregisterbookform;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Assetregisterbookform noun into database
	*@param the_Assetregisterbookform
	*@return Assetregisterbookformobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Assetregisterbookform", httpMethod = "PUT",notes = "updates a noun of Assetregisterbookform",response = arb.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Assetregisterbookform" ,headers="Accept=application/json")
    @ResponseBody
	public arb update_Assetregisterbookform(@RequestBody arb the_Assetregisterbookform) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Assetregisterbookform controller started operation!");

		arb a_Assetregisterbookform;

		a_Assetregisterbookform = Assetregisterbookform_service.update_assetregisterbookform(the_Assetregisterbookform);

		log.info("Object returned from update_Assetregisterbookform method !");

 

        return a_Assetregisterbookform;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Assetregisterbookform noun from  database based on given noun id
	*@param Assetregisterbookform_id
	*@return Assetregisterbookformobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Assetregisterbookform/{Assetregisterbookform_id}", httpMethod = "GET",notes = "updates a noun of Assetregisterbookform",response = arb.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Assetregisterbookform/{Assetregisterbookform_id}" ,headers="Accept=application/json")
    @ResponseBody
	public arb search_for_update_Assetregisterbookform(@PathVariable("Assetregisterbookform_id")String Assetregisterbookform_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Assetregisterbookform controller started operation!");

		arb the_Assetregisterbookform = new arb();

		the_Assetregisterbookform = Assetregisterbookform_service.assetregisterbookform_search_for_update(Assetregisterbookform_id);

		log.info("Object returned from search_for_update_Assetregisterbookform method !");

 

        return the_Assetregisterbookform;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Assetregisterbookform noun from  database based on given noun id
	*@param Assetregisterbookform_id
	*@return Assetregisterbookformobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Assetregisterbookform/{Assetregisterbookform_id}", httpMethod = "DELETE",notes = "deletes a noun of Assetregisterbookform",response = arb.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Assetregisterbookform/{Assetregisterbookform_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Assetregisterbookform(@PathVariable("Assetregisterbookform_id")String  Assetregisterbookform_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Assetregisterbookform controller started operation!");

		String service_return_msg = "";

		service_return_msg = Assetregisterbookform_service.delete_assetregisterbookform(Assetregisterbookform_id);

		log.info("Object returned from delete_Assetregisterbookform method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Assetregisterbookform noun from  database
	*
	*@return List of Assetregisterbookform objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Assetregisterbookform", httpMethod = "GET",notes = "special search that gets all values of Assetregisterbookform",response = arb.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Assetregisterbookform" ,headers="Accept=application/json")
    @ResponseBody
	public List<arb> get_all_Assetregisterbookform() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Assetregisterbookform controller started operation!");

		List<arb> Assetregisterbookform_list = new ArrayList<arb>();

		Assetregisterbookform_list = Assetregisterbookform_service.get_all_assetregisterbookform();

		log.info("Object returned from get_all_Assetregisterbookform method !");

        return Assetregisterbookform_list;
	}




}