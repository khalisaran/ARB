package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.Srv_own;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.Srv_own_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/Srv_own_Default_Activity", description = "Srv_own_Default_Activity of Srv_own_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("Srv_own_Default_ActivityController")
@RequestMapping("/api/Srv_own_Default_Activity")
public class Srv_own_Default_ActivityController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(Srv_own_Default_ActivityController.class.getName());

 


	private Srv_own_Default_ActivityService Srv_own_Default_Activity_service;


	public Srv_own_Default_ActivityService get_Srv_own_Default_Activity_service() {
		return Srv_own_Default_Activity_service;
	}


	@Resource(name="Srv_own_Default_ActivityService")
	public void set_Srv_own_Default_Activity_service(Srv_own_Default_ActivityService Srv_own_Default_Activity_service) {
		this.Srv_own_Default_Activity_service = Srv_own_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Srv_own noun into database
	* @param the_Srv_own
	*@return Srv_own object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Srv_own", httpMethod = "POST",notes = "creates a noun of Srv_own",response = Srv_own.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Srv_own" ,headers="Accept=application/json")
    @ResponseBody
	public Srv_own create_Srv_own(@RequestBody Srv_own the_Srv_own) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Srv_own controller started operation!");

		the_Srv_own.setId(null);

		Srv_own a_Srv_own = Srv_own_Default_Activity_service.create_srv_own(the_Srv_own);

		log.info("Object returned from create_Srv_own method !");

 

        return a_Srv_own;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Srv_own noun into database
	*@param the_Srv_own
	*@return Srv_ownobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Srv_own", httpMethod = "PUT",notes = "updates a noun of Srv_own",response = Srv_own.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Srv_own" ,headers="Accept=application/json")
    @ResponseBody
	public Srv_own update_Srv_own(@RequestBody Srv_own the_Srv_own) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Srv_own controller started operation!");

		Srv_own a_Srv_own;

		a_Srv_own = Srv_own_Default_Activity_service.update_srv_own(the_Srv_own);

		log.info("Object returned from update_Srv_own method !");

 

        return a_Srv_own;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Srv_own noun from  database based on given noun id
	*@param Srv_own_id
	*@return Srv_ownobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Srv_own/{Srv_own_id}", httpMethod = "GET",notes = "updates a noun of Srv_own",response = Srv_own.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Srv_own/{Srv_own_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Srv_own search_for_update_Srv_own(@PathVariable("Srv_own_id")String Srv_own_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Srv_own controller started operation!");

		Srv_own the_Srv_own = new Srv_own();

		the_Srv_own = Srv_own_Default_Activity_service.srv_own_search_for_update(Srv_own_id);

		log.info("Object returned from search_for_update_Srv_own method !");

 

        return the_Srv_own;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Srv_own noun from  database based on given noun id
	*@param Srv_own_id
	*@return Srv_ownobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Srv_own/{Srv_own_id}", httpMethod = "DELETE",notes = "deletes a noun of Srv_own",response = Srv_own.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Srv_own/{Srv_own_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Srv_own(@PathVariable("Srv_own_id")String  Srv_own_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Srv_own controller started operation!");

		String service_return_msg = "";

		service_return_msg = Srv_own_Default_Activity_service.delete_srv_own(Srv_own_id);

		log.info("Object returned from delete_Srv_own method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Srv_own noun from  database
	*
	*@return List of Srv_own objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Srv_own", httpMethod = "GET",notes = "special search that gets all values of Srv_own",response = Srv_own.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Srv_own" ,headers="Accept=application/json")
    @ResponseBody
	public List<Srv_own> get_all_Srv_own() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Srv_own controller started operation!");

		List<Srv_own> Srv_own_list = new ArrayList<Srv_own>();

		Srv_own_list = Srv_own_Default_Activity_service.get_all_srv_own();

		log.info("Object returned from get_all_Srv_own method !");

 

        return Srv_own_list;

	}




}