package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.Type;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.Type_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/Type_Activity", description = "Type_Activity of Type_Activity",produces = "application/json")
@CrossOrigin
@Controller("Type_ActivityController")
@RequestMapping("/api/Type_Activity")
public class Type_ActivityController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(Type_ActivityController.class.getName());

 


	private Type_ActivityService Type_Activity_service;


	public Type_ActivityService get_Type_Activity_service() {
		return Type_Activity_service;
	}


	@Resource(name="Type_ActivityService")
	public void set_Type_Activity_service(Type_ActivityService Type_Activity_service) {
		this.Type_Activity_service = Type_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Type noun into database
	* @param the_Type
	*@return Type object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Type", httpMethod = "POST",notes = "creates a noun of Type",response = Type.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Type" ,headers="Accept=application/json")
    @ResponseBody
	public Type create_Type(@RequestBody Type the_Type) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Type controller started operation!");

		the_Type.setid(null);

		Type a_Type = Type_Activity_service.create_type(the_Type);

		log.info("Object returned from create_Type method !");

 

        return a_Type;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Type noun into database
	*@param the_Type
	*@return Typeobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Type", httpMethod = "PUT",notes = "updates a noun of Type",response = Type.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Type" ,headers="Accept=application/json")
    @ResponseBody
	public Type update_Type(@RequestBody Type the_Type) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Type controller started operation!");

		Type a_Type;

		a_Type = Type_Activity_service.update_type(the_Type);

		log.info("Object returned from update_Type method !");

 

        return a_Type;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Type noun from  database based on given noun id
	*@param Type_id
	*@return Typeobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Type/{Type_id}", httpMethod = "GET",notes = "updates a noun of Type",response = Type.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Type/{Type_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Type search_for_update_Type(@PathVariable("Type_id")String Type_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Type controller started operation!");

		Type the_Type = new Type();

		the_Type = Type_Activity_service.type_search_for_update(Type_id);

		log.info("Object returned from search_for_update_Type method !");

 

        return the_Type;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Type noun from  database based on given noun id
	*@param Type_id
	*@return Typeobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Type/{Type_id}", httpMethod = "DELETE",notes = "deletes a noun of Type",response = Type.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Type/{Type_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Type(@PathVariable("Type_id")String  Type_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Type controller started operation!");

		String service_return_msg = "";

		service_return_msg = Type_Activity_service.delete_type(Type_id);

		log.info("Object returned from delete_Type method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Type noun from  database
	*
	*@return List of Type objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Type", httpMethod = "GET",notes = "special search that gets all values of Type",response = Type.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Type" ,headers="Accept=application/json")
    @ResponseBody
	public List<Type> get_all_Type() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Type controller started operation!");

		List<Type> Type_list = new ArrayList<Type>();

		Type_list = Type_Activity_service.get_all_type();

		log.info("Object returned from get_all_Type method !");

 

        return Type_list;

	}




}