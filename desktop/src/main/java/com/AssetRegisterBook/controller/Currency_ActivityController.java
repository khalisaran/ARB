package com.AssetRegisterBook.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.AssetRegisterBook.domain.core.Currency;

import com.AssetRegisterBook.config.AssetRegisterBookSwaggerUIConstants;

import com.AssetRegisterBook.service.Currency_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/api/Currency_Activity", description = "Currency_Activity of Currency_Activity",produces = "application/json")
@CrossOrigin
@Controller("Currency_ActivityController")
@RequestMapping("/api/Currency_Activity")
public class Currency_ActivityController  implements AssetRegisterBookSwaggerUIConstants {

private static Logger log = Logger.getLogger(Currency_ActivityController.class.getName());

 


	private Currency_ActivityService Currency_Activity_service;


	public Currency_ActivityService get_Currency_Activity_service() {
		return Currency_Activity_service;
	}


	@Resource(name="Currency_ActivityService")
	public void set_Currency_Activity_service(Currency_ActivityService Currency_Activity_service) {
		this.Currency_Activity_service = Currency_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Currency noun into database
	* @param the_Currency
	*@return Currency object will return for mongo
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Currency", httpMethod = "POST",notes = "creates a noun of Currency",response = Currency.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Currency" ,headers="Accept=application/json")
    @ResponseBody
	public Currency create_Currency(@RequestBody Currency the_Currency) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Currency controller started operation!");

		the_Currency.setId(null);

		Currency a_Currency = Currency_Activity_service.create_currency(the_Currency);

		log.info("Object returned from create_Currency method !");

 

        return a_Currency;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Currency noun into database
	*@param the_Currency
	*@return Currencyobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Currency", httpMethod = "PUT",notes = "updates a noun of Currency",response = Currency.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Currency" ,headers="Accept=application/json")
    @ResponseBody
	public Currency update_Currency(@RequestBody Currency the_Currency) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Currency controller started operation!");

		Currency a_Currency;

		a_Currency = Currency_Activity_service.update_currency(the_Currency);

		log.info("Object returned from update_Currency method !");

 

        return a_Currency;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Currency noun from  database based on given noun id
	*@param Currency_id
	*@return Currencyobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Currency/{Currency_id}", httpMethod = "GET",notes = "updates a noun of Currency",response = Currency.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Currency/{Currency_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Currency search_for_update_Currency(@PathVariable("Currency_id")String Currency_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Currency controller started operation!");

		Currency the_Currency = new Currency();

		the_Currency = Currency_Activity_service.currency_search_for_update(Currency_id);

		log.info("Object returned from search_for_update_Currency method !");

 

        return the_Currency;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Currency noun from  database based on given noun id
	*@param Currency_id
	*@return Currencyobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Currency/{Currency_id}", httpMethod = "DELETE",notes = "deletes a noun of Currency",response = Currency.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Currency/{Currency_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Currency(@PathVariable("Currency_id")String  Currency_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Currency controller started operation!");

		String service_return_msg = "";

		service_return_msg = Currency_Activity_service.delete_currency(Currency_id);

		log.info("Object returned from delete_Currency method !");

 

        return service_return_msg;

	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Currency noun from  database
	*
	*@return List of Currency objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Currency", httpMethod = "GET",notes = "special search that gets all values of Currency",response = Currency.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = AssetRegisterBookSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = AssetRegisterBookSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = AssetRegisterBookSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = AssetRegisterBookSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = AssetRegisterBookSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Currency" ,headers="Accept=application/json")
    @ResponseBody
	public List<Currency> get_all_Currency() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Currency controller started operation!");

		List<Currency> Currency_list = new ArrayList<Currency>();

		Currency_list = Currency_Activity_service.get_all_currency();

		log.info("Object returned from get_all_Currency method !");

 

        return Currency_list;

	}




}